{"version":3,"sources":["utils/calculator.js","views/components/screen/index.js","views/components/body/button.js","views/style.js","views/calculator.js","App.js","serviceWorker.js","index.js"],"names":["ALLOWED_CHARACTERS","multiplySign","dividerSign","evaluateExpression","expression","first","second","others","includes","pop","slice","join","formatterSigns","value","formattedValue","replace","calculateFn","result","eval","Infinity","Ex","Screen","props","classes","className","GeneralButton","setState","Button","onClick","useStyles","makeStyles","screen","background","border","borderRadius","marginTop","marginLeft","marginRight","boxShadow","color","width","textAlign","fontSize","fontFamily","height","padding","button","margin","operator","delbutton","equalbutton","display","root","flexGrow","operators","numbers","Calculator","initialvalue","useState","state","handleChange","change","oldValue","Grid","item","xs","map","key","container","number","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.47cfaa7e.chunk.js","sourcesContent":["/* eslint-disable no-eval */\nconst ALLOWED_CHARACTERS = ['*', '/', '+', '-', '.'];\nconst multiplySign = /x/gi;\nconst dividerSign = /%/gi;\n\nconst evaluateExpression = (expression) => {\n  const [first, second, ...others] = [...expression];\n\n  if (first === '0' && !ALLOWED_CHARACTERS.includes(second)) {\n    const removeFirst = [...expression].slice(1).join('');\n    return evaluateExpression(removeFirst);\n  }\n\n  if (ALLOWED_CHARACTERS.includes(others.pop())) {\n    const removeLast = [...expression].slice(0, -1).join('');\n    return evaluateExpression(removeLast);\n  }\n\n  return expression;\n};\n\nconst formatterSigns = (value) => {\n  let formattedValue = value;\n  formattedValue = formattedValue.replace(multiplySign, '*');\n  formattedValue = formattedValue.replace(dividerSign, '/');\n\n  return formattedValue;\n};\n\nexport const calculateFn = (value) => {\n  try {\n    let result = 0;\n    const formattedValue = formatterSigns(value);\n\n    result = eval(evaluateExpression(formattedValue));\n    if (result === Infinity) {\n      result = 'Error';\n    }\n\n    return result;\n  } catch (Ex) {\n    return 'Syntax error';\n  }\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Screen = (props) => {\n  const { value, classes } = props;\n\n  return <div className={classes}>{value}</div>;\n};\nScreen.propTypes = { value: PropTypes.string, classes: PropTypes.string };\nexport default Screen;\n","import React from 'react';\nimport { Button } from '@material-ui/core';\n\nconst GeneralButton = (props) => {\n  const { value, setState, classes } = props;\n  return (\n    <Button\n      className={classes}\n      onClick={() => {\n        setState(value);\n      }}\n    >\n      {value}\n    </Button>\n  );\n};\n\nexport default GeneralButton;\n","import { makeStyles } from '@material-ui/core/styles';\n\nexport const useStyles = makeStyles({\n  screen: {\n    background: '#000000',\n    border: 0,\n    borderRadius: 3,\n    marginTop: 30,\n    marginLeft: '1.6%',\n    marginRight: '68.5%',\n    boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\n    color: 'white',\n    width: '240px',\n    textAlign: 'end',\n    fontSize: '45px',\n    fontFamily: 'serif',\n    height: 48,\n    padding: '0 30px',\n  },\n  button: {\n    background: '#C3C3C3',\n    border: 0,\n    margin: '4px',\n    borderRadius: 3,\n    boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\n    color: 'white',\n    height: 48,\n    padding: '0 30px',\n  },\n  operator: {\n    background: '#C3C3C3',\n    border: 0,\n    margin: '4px',\n    borderRadius: 3,\n    boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\n    color: 'white',\n    height: 48,\n    padding: '0 30px',\n  },\n  delbutton: {\n    background: 'linear-gradient(45deg, red 30%, red 90%)',\n    border: 0,\n    borderRadius: 3,\n    boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\n    color: 'white',\n    height: 48,\n    padding: '0 30px',\n  },\n  equalbutton: {\n    background: 'linear-gradient(45deg, blue 30%, blue 90%)',\n    border: 0,\n    borderRadius: 3,\n    boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\n    color: 'white',\n    height: '220px',\n    marginLeft: '-4px',\n    width: '70px',\n    padding: '0 30px',\n    display: 'inline-block',\n  },\n\n  root: {\n    flexGrow: 1,\n    width: '1000px',\n    height: '100px',\n    marginLeft: '40%',\n    marginRight: '40%',\n  },\n});\n","import React, { useState } from 'react';\nimport Screen from './components/screen';\nimport Button from './components/body/button';\nimport { calculateFn } from '../utils/calculator';\nimport { useStyles } from './style';\nimport Grid from '@material-ui/core/Grid';\n\nconst operators = ['x', '+', '-', '%'];\nconst numbers = ['7', '8', '9', '4', '5', '6', '1', '2', '3', '0', '.'];\n\nconst Calculator = (props) => {\n  const classes = useStyles();\n  const { initialvalue } = props;\n  const [state, setState] = useState(initialvalue);\n  function equal() {\n    if (state !== '0') {\n      const result = calculateFn(state);\n      setState(result + '');\n    }\n  }\n  function handleChange(change) {\n    setState((oldValue) => {\n      if (oldValue === '0' || oldValue === 'Error' || oldValue === 'Syntax error') {\n        return change;\n      }\n      return oldValue + change;\n    });\n  }\n  function handleDelete() {\n    setState('0');\n  }\n  return (\n    <div className={classes.root}>\n      <Screen classes={classes.screen} value={state} />\n      <Grid item xs={4}>\n        {operators.map((operator) => (\n          <Button\n            key={operator}\n            classes={classes.operator}\n            value={operator}\n            setState={handleChange}\n          />\n        ))}\n        <br />\n      </Grid>\n      <Grid container>\n        <Grid item xs={3}>\n          {numbers.map((number) => (\n            <Button key={number} classes={classes.button} value={number} setState={handleChange} />\n          ))}\n          <Button classes={classes.delbutton} setState={handleDelete} value=\"AC\" />\n        </Grid>\n        <Grid>\n          <Button classes={classes.equalbutton} setState={equal} value=\"=\" />\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\nexport default Calculator;\n","import React from 'react';\nimport './App.css';\nimport Calculator from './views/calculator';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Calculator initialvalue=\"0\" />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}