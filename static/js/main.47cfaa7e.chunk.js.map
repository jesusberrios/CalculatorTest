{"version":3,"sources":["utils/calculator.js","views/components/screen/index.js","views/components/body/button.js","views/style.js","views/calculator.js","App.js","serviceWorker.js","index.js"],"names":["ALLOWED_CHARACTERS","multiplySign","dividerSign","evaluateExpression","expression","first","second","others","includes","pop","slice","join","formatterSigns","value","formattedValue","replace","calculateFn","result","eval","Infinity","Ex","Screen","props","classes","className","GeneralButton","setState","Button","onClick","useStyles","makeStyles","screen","background","border","borderRadius","marginTop","marginLeft","marginRight","boxShadow","color","width","textAlign","fontSize","fontFamily","height","padding","button","margin","operator","delbutton","equalbutton","display","root","flexGrow","operators","numbers","Calculator","initialvalue","useState","state","handleChange","change","oldValue","Grid","item","xs","map","key","container","number","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.47cfaa7e.chunk.js","sourcesContent":["/* eslint-disable no-eval */\r\nconst ALLOWED_CHARACTERS = ['*', '/', '+', '-', '.'];\r\nconst multiplySign = /x/gi;\r\nconst dividerSign = /%/gi;\r\n\r\nconst evaluateExpression = (expression) => {\r\n  const [first, second, ...others] = [...expression];\r\n\r\n  if (first === '0' && !ALLOWED_CHARACTERS.includes(second)) {\r\n    const removeFirst = [...expression].slice(1).join('');\r\n    return evaluateExpression(removeFirst);\r\n  }\r\n  \r\n  if (ALLOWED_CHARACTERS.includes(others.pop())) {\r\n    const removeLast = [...expression].slice(0, -1).join('');\r\n    return evaluateExpression(removeLast);\r\n  }\r\n\r\n  return expression;\r\n};\r\n\r\nconst formatterSigns = (value) => {\r\n  let formattedValue = value;\r\n  formattedValue = formattedValue.replace(multiplySign, '*');\r\n  formattedValue = formattedValue.replace(dividerSign, '/');\r\n\r\n  return formattedValue;\r\n};\r\n\r\nexport const calculateFn = (value) => {\r\n  try {\r\n    let result = 0;\r\n    const formattedValue = formatterSigns(value);\r\n\r\n    result = eval(evaluateExpression(formattedValue));\r\n    if (result === Infinity) {\r\n      result = 'Error';\r\n    }\r\n\r\n    return result;\r\n  } catch (Ex) {\r\n    return 'Syntax error';\r\n  }\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Screen = (props) => {\r\n  const { value, classes } = props;\r\n\r\n  return <div className={classes}>{value}</div>;\r\n};\r\nScreen.propTypes = { value: PropTypes.string, classes: PropTypes.string };\r\nexport default Screen;\r\n","import React from 'react';\r\nimport { Button } from '@material-ui/core';\r\n\r\nconst GeneralButton = (props) => {\r\n  const { value, setState, classes } = props;\r\n  return (\r\n    <Button\r\n      className={classes}\r\n      onClick={() => {\r\n        setState(value);\r\n      }}\r\n    >\r\n      {value}\r\n    </Button>\r\n  );\r\n};\r\n\r\nexport default GeneralButton;\r\n","import { makeStyles } from '@material-ui/core/styles';\r\n\r\nexport const useStyles = makeStyles({\r\n  screen: {\r\n    background: '#000000',\r\n    border: 0,\r\n    borderRadius: 3,\r\n    marginTop: 30,\r\n    marginLeft: '1.6%',\r\n    marginRight: '68.5%',\r\n    boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\r\n    color: 'white',\r\n    width: '240px',\r\n    textAlign: 'end',\r\n    fontSize: '45px',\r\n    fontFamily: 'serif',\r\n    height: 48,\r\n    padding: '0 30px',\r\n  },\r\n  button: {\r\n    background: '#C3C3C3',\r\n    border: 0,\r\n    margin: '4px',\r\n    borderRadius: 3,\r\n    boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\r\n    color: 'white',\r\n    height: 48,\r\n    padding: '0 30px',\r\n  },\r\n  operator: {\r\n    background: '#C3C3C3',\r\n    border: 0,\r\n    margin: '4px',\r\n    borderRadius: 3,\r\n    boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\r\n    color: 'white',\r\n    height: 48,\r\n    padding: '0 30px',\r\n  },\r\n  delbutton: {\r\n    background: 'linear-gradient(45deg, red 30%, red 90%)',\r\n    border: 0,\r\n    borderRadius: 3,\r\n    boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\r\n    color: 'white',\r\n    height: 48,\r\n    padding: '0 30px',\r\n  },\r\n  equalbutton: {\r\n    background: 'linear-gradient(45deg, blue 30%, blue 90%)',\r\n    border: 0,\r\n    borderRadius: 3,\r\n    boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\r\n    color: 'white',\r\n    height: '220px',\r\n    marginLeft: '-4px',\r\n    width: '70px',\r\n    padding: '0 30px',\r\n    display: 'inline-block',\r\n  },\r\n\r\n  root: {\r\n    flexGrow: 1,\r\n    width: '1000px',\r\n    height: '100px',\r\n    marginLeft: '40%',\r\n    marginRight: '40%',\r\n  },\r\n});\r\n","import React, { useState } from 'react';\r\nimport Screen from './components/screen';\r\nimport Button from './components/body/button';\r\nimport { calculateFn } from '../utils/calculator';\r\nimport { useStyles } from './style';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nconst operators = ['x', '+', '-', '%'];\r\nconst numbers = ['7', '8', '9', '4', '5', '6', '1', '2', '3', '0', '.'];\r\n\r\nconst Calculator = (props) => {\r\n  const classes = useStyles();\r\n  const { initialvalue } = props;\r\n  const [state, setState] = useState(initialvalue);\r\n  function equal() {\r\n    if (state !== '0') {\r\n      const result = calculateFn(state);\r\n      setState(result + '');\r\n    }\r\n  }\r\n  function handleChange(change) {\r\n    setState((oldValue) => {\r\n      if (oldValue === '0' || oldValue === 'Error' || oldValue === 'Syntax error') {\r\n        return change;\r\n      }\r\n      return oldValue + change;\r\n    });\r\n  }\r\n  function handleDelete() {\r\n    setState('0');\r\n  }\r\n  return (\r\n    <div className={classes.root}>\r\n      <Screen classes={classes.screen} value={state} />\r\n      <Grid item xs={4}>\r\n        {operators.map((operator) => (\r\n          <Button\r\n            key={operator}\r\n            classes={classes.operator}\r\n            value={operator}\r\n            setState={handleChange}\r\n          />\r\n        ))}\r\n        <br />\r\n      </Grid>\r\n      <Grid container>\r\n        <Grid item xs={3}>\r\n          {numbers.map((number) => (\r\n            <Button key={number} classes={classes.button} value={number} setState={handleChange} />\r\n          ))}\r\n          <Button classes={classes.delbutton} setState={handleDelete} value=\"AC\" />\r\n        </Grid>\r\n        <Grid>\r\n          <Button classes={classes.equalbutton} setState={equal} value=\"=\" />\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\nexport default Calculator;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Calculator from './views/calculator';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Calculator initialvalue=\"0\" />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}